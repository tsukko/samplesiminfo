apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.hiya.jacoco-android'
apply plugin: 'kotlin-kapt'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('keystore.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "jp.co.integrityworks.mysiminfo"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 9
        versionName "1.3"
    }

    signingConfigs {
        release {
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//            storeFile file(keystoreProperties['storeFile'])
//            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [admob_app_id: project.property("admobAppIdDebug")]
            buildConfigField("String", "admob_app_id", "\"{$admobAppIdDebug}\"")
            resValue "string", "ad_unit_id", "$admobUnitIdforDebug"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [admob_app_id: project.property("admobAppIdSimInfo")]
            buildConfigField("String", "admob_app_id", "\"{$admobAppIdSimInfo}\"")
            resValue "string", "ad_unit_id", "$admobUnitIdSimInfoBanner"
        }
    }

    flavorDimensions "default"
    productFlavors {
        development {
            dimension "default"
            applicationIdSuffix ".dev"
            versionNameSuffix ".dev"
        }
        staging {
            dimension "default"
            applicationIdSuffix ".stg"
            versionNameSuffix ".stg"
        }
        production {
            dimension "default"
        }
    }

    // Test周り
    sourceSets {
        test.java.srcDirs += 'src/test/java'
        androidTest.java.srcDirs += 'src/androidTest/java'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '30.0.2'
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.30'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-alpha2'
    implementation 'com.google.android.material:material:1.3.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // AdMob
    implementation 'com.google.android.gms:play-services-ads:19.7.0'

    // Test周り
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'androidx.test:rules:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test.ext:truth:1.3.0'
    testImplementation 'com.google.truth:truth:1.1.2'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.robolectric:robolectric:4.5.1'
}
repositories {
    mavenCentral()
}
jacoco {
    toolVersion = "0.8.4"
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}